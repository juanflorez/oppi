package com.sofia.oppi.downloader;
import android.app.Activity;
import android.app.Application;
import android.app.DownloadManager;
import android.app.DownloadManager.Query;
import android.app.DownloadManager.Request;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.Toast;

import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.VolleyLog;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.android.volley.Request.Method;
import com.sofia.oppi.Constants;
import com.sofia.oppi.R;
import com.sofia.oppi.animationengine.ContentPackage;
import com.sofia.oppi.dbUtils.DbModules;
import com.sofia.oppi.dbUtils.DownloadingModulesHelper;
import com.sofia.oppi.install.Installer;
import com.sofia.oppi.store.storeDB.ModuleRecord;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

//TODO: Refactory this mess
/*Pending refactory, it reads the online JSON generated by
* https://docs.google.com/spreadsheets/d/1Xb2GuEl8SRNI8Zi4iOv-OIde3HcbLmpi9legBXYDpNw/edit#gid=0
* It uses Volley and Gson to parse the json object and download the images
* It updates the internal database. We may have a circular dependency between the database
* and this module.
* */
public class Downloader  {
    private final String TAG = "Downloader";
    private DownloadingModulesHelper dbHelper;
    private long enqueue;
    private DownloadManager dm;
    BrReceiver receiver ;
    private String urlJsonObj = Constants.PUBLIC_MODULES;
    private Context mContext;
    private Installer mInstaller;


    // Progress dialog
    private ProgressDialog pDialog;


    // temporary string to show the parsed response
    private String jsonResponse;



    public Downloader (Context c) {

            mContext = c;
            mInstaller = Installer.getInstance(mContext);
            dbHelper = new DownloadingModulesHelper(mContext);
    }



    public void downloadModule(String ModuleURL) {
        dm = (DownloadManager) mContext.getSystemService(Context.DOWNLOAD_SERVICE);

        Request request = new Request(
                Uri.parse(ModuleURL));
        request.setDestinationInExternalFilesDir(mContext, null, "lesson.zip");

        createTable();

        //Add the request to the Download queue and to the database for the receiver.
        addDownloadToDb(dm.enqueue(request),ModuleURL);

    }

    private void addDownloadToDb(long queue, String url) {

        SQLiteDatabase db = dbHelper.getWritableDatabase();

        ContentValues values = new ContentValues();

        values.put(DbModules.OnGoingDownloads.QUEUE_ID,
                   queue);
        values.put(DbModules.OnGoingDownloads.LINK,
                   url);
        values.put(DbModules.OnGoingDownloads.START_TIME,
                  System.currentTimeMillis());

        long newRowId;
        newRowId = db.insert(
                DbModules.OnGoingDownloads.TABLE_NAME,
                null,
                values);
        db.close();
        Log.i(TAG, "Download "+ queue + " from " + url);

    }


    private void createTable() {

        SQLiteDatabase db= dbHelper.getWritableDatabase();
        db.execSQL(DbModules.CREATE_DOWNLOADS_TABLE);

    }

/*Inspired in http://www.androidhive.info/2014/09/android-json-parsing-using-volley/*/


    private ArrayList<ModuleRecord> fetchModulesList() {
      final ArrayList<ModuleRecord> list = new ArrayList<ModuleRecord>();
      JsonObjectRequest jsonObjReq = new JsonObjectRequest(Method.GET,
       Constants.PUBLIC_MODULES, null, new Response.Listener<JSONObject>() {

            @Override
            public void onResponse(JSONObject response) {

                Log.d(TAG, response.toString());
                try {
                   parseJson(response.getJSONArray("packages"));
                } catch (JSONException e) {
                    e.printStackTrace();
                    Toast.makeText(mContext,
                            "Error: " + e.getMessage(),
                            Toast.LENGTH_LONG).show();
                }


            }

          //TODO where should this method be?
          private ArrayList<ModuleRecord> parseJson(JSONArray packageList) throws  JSONException {

              Log.d(TAG, "PACKAGE LIST: "+ packageList.toString());
              ArrayList<ModuleRecord> list = new ArrayList<ModuleRecord>();

              for (int x = 0; x < packageList.length(); x++) {

                  ModuleRecord record = new ModuleRecord();
                  JSONObject module = (JSONObject)packageList.get(x);
                  Log.d(TAG, "PACKAGE : "+ x + module.toString());
                  record.setModuleID(module.getString("packageID"));
                  record.setTittle(module.getString("Name"));
                  //TODO add duration and other relevant data to the record displayed in the store
                  String Duration = module.getString("Duration");

                  record.setDownloadURL(module.getString("url"));
                  //TODO dynamically select the best icon for the device
                  record.setIconUrl(module.getString("MediumIcon"));
                  list.add(record);

              }

              return list;
          }
        }, new Response.ErrorListener() {

            @Override
            public void onErrorResponse(VolleyError error) {
                VolleyLog.d(TAG, "Error: " + error.getMessage());
                Toast.makeText(mContext,
                        error.getMessage(), Toast.LENGTH_SHORT).show();

            }
        });
        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(jsonObjReq);
        return list;

    }



    /*Inspired in http://www.androidhive.info/2014/09/android-json-parsing-using-volley/*/


    public void fetchModules() {

        JsonObjectRequest jsonObjReq = new JsonObjectRequest(Method.GET,
                Constants.PUBLIC_MODULES, null, new Response.Listener<JSONObject>() {

            @Override
            public void onResponse(JSONObject response) {
                Log.d(TAG, response.toString());

                try {
                    // Parsing json object response
                    // response will be a json object
                    JSONArray packageList = response.getJSONArray("packages");
                    Log.d(TAG, "PACKAGE LIST: "+ packageList.toString());
                    for (int x = 0; x < packageList.length(); x++) {
                        JSONObject module = (JSONObject)packageList.get(x);
                        Log.d(TAG, "PACKAGE : "+ x + module.toString());
                        String packageId = module.getString("packageID");
                        String Name = module.getString("Name");
                        String Duration = module.getString("Duration");
                        String Url = module.getString("url");
                        String icon = module.getString("MediumIcon");
                        //TODO: uncomment to download icons
                        //DownloadIcon(icon);
                        //TODO: uncomment to download
                        // DownloadModule(Url);
                        //Add Module to the database
                        //TODO: uncommet to install
                        //mInstaller.registerPackage(module);
                    }


                } catch (JSONException e) {
                    e.printStackTrace();
                    Toast.makeText(mContext,
                            "Error: " + e.getMessage(),
                            Toast.LENGTH_LONG).show();
                }

            }
        }, new Response.ErrorListener() {

            @Override
            public void onErrorResponse(VolleyError error) {
                VolleyLog.d(TAG, "Error: " + error.getMessage());
                Toast.makeText(mContext,
                        error.getMessage(), Toast.LENGTH_SHORT).show();
                // hide the progress dialog
                //hidepDialog();
            }
        });
        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(jsonObjReq);

    }

    public long getEnqueue() {
        return enqueue;
    }
}